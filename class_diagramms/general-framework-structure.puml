@startuml

class ExperimentRunner {
    + segmenter
    + target_images_dir
    + run()
    + save_duration(start_time, end_time, n_images)
}

interface IImageSegmenter {
    + load_target_images(path)
    + segment(target_images)
    + save_segmentation(segmentation)
}

class BaseSegmenter {
    + output_dir
    + preprocessing_steps
    + segmentation_refiner
    + img_extension
    + load_target_images(path)
    + segment(target_images)
    + save_segmentation(segmentation)
}

class AtlasSegmenter {
    + n_atlases_to_select
    + atlas_dir
    + atlas_selector
    + segmentation_voter
    + load_atlases()
    + segment(target_images)
}

interface IAtlasSelector {
    + select_atlases(atlases, target_image, n_atlases_to_select)
}

class BaseAtlasSelector {
    + select_atlases(atlases, target_image, n_atlases_to_select)
    + to_gray(image)
}

AtlasSegmenter o-- "1" IAtlasSelector
IAtlasSelector <|.. BaseAtlasSelector

class MLSegmenter {
    + ...
    + segment(target_images)
    + ...():
}

interface IPreprocessingStep {
    + preprocess_image(image)
    + preprocess_mask(mask)
    + undo_preprocessing(image, parameters)
}

interface ISegmentationRefiner {
    + refine(target_mask, target_image)
}

IImageSegmenter <|.. BaseSegmenter
BaseSegmenter <|-d- AtlasSegmenter
BaseSegmenter <|-d- MLSegmenter
ExperimentRunner o-- "1...*" IImageSegmenter
BaseSegmenter o-l- "0...*" IPreprocessingStep
BaseSegmenter o-r- "0...*" ISegmentationRefiner



class TargetSegmentation {
    - output_path
    - result_mask
}

class TargetImage {
    - image_path:
    - image
    - preprocessed_image
    - preprocessing_parameters
    + append_preprocessing_parameters()
}

IImageSegmenter .r.> TargetSegmentation : <<create>>
IImageSegmenter .l.> TargetImage : <<segment>>

class SegmentationMask {
}

BaseSegmenter .d.> SegmentationMask : <<save>>


class Validator {
    + ground_truth_dir
    + ground_truths
    + output_dir
    + metrics
    + ...
    + load_masks(ground_truth_dir)
    + validate(predictions_dir)
    + ...()
}

interface IMetric {
    + get_name()
    + compute(gt, pred, computed_metrics, metadata)
}

Validator o-r- "0...*" IMetric
Validator .u.> SegmentationMask : <<load>>

class EvaluationMetrics {
    + dsc
    + ...
}

Validator .d.> EvaluationMetrics : <<save>>

class Visualizer {
    + base_validation_path
    + plotters
    + metrics
    + output_dir
    + visualize()
}

class IPlotter {
    + plot(data_frames, output_path)
}

Visualizer .u.> EvaluationMetrics : <<load>>
Visualizer o-r- "0...1" IPlotter

@enduml