@startuml

class ExperimentRunner {
    + segmenter: IImageSegmenter
    + target_images_dir: str
    + run(): void
    + save_duration(): void
}

interface IImageSegmenter {
    + load_target_images(directory_path: str): void
    + segment(image_paths: List<TargetImage>): void
    + save_segmentation(segmented_image: TargetSegmentation): void
}

class BaseSegmenter {
    + output_dir: str
    + self.preprocessing_steps: List<IPreprocessingStep>
    + segmentation_refiner: ISegmentationRefiner
    + img_extension: str
    + load_target_images(directory_path: str): List<TargetImage>
    + segment(image_paths: List<TargetImage>): void
    + save_segmentation(segmented_image: TargetSegmentation): void
}

class AtlasSegmenter {
    + ...
    + segment(image_paths: List<TargetImage>): void
    + ...()
}

class MLSegmenter {
    + ...
    + segment(image_paths: List<TargetImage>): void
    + ...():
}

interface IPreprocessingStep {
    + preprocess_image(image: np.ndarray): Tuple[np.ndarray, Dict]
    + preprocess_mask(mask: np.ndarray, parameters: Dict): np.ndarray
    + undo_preprocessing(image: np.ndarray, parameters: Dict): np.ndarray
}

interface ISegmentationRefiner {
    + refine(target_mask: np.ndarray, target_image: TargetImage): np.ndarray
}

IImageSegmenter <|.. BaseSegmenter
BaseSegmenter <|-d- AtlasSegmenter
BaseSegmenter <|-d- MLSegmenter
ExperimentRunner o-- "1...*" IImageSegmenter
BaseSegmenter o-l- "0...*" IPreprocessingStep
BaseSegmenter o-r- "0...1" ISegmentationRefiner



class TargetSegmentation {
    - output_path: str
    - result_mask: np.ndarray
}

class TargetImage {
    - image_path: str
    - image: np.ndarray
    - preprocessed_image: np.ndarray
    - preprocessing_parameters: List<Dict>
    + append_preprocessing_parameters(parameters: Dict): void
}

IImageSegmenter .r.> TargetSegmentation : <<create>>
IImageSegmenter .l.> TargetImage : <<segment>>

class SegmentationMask {
}

BaseSegmenter .d.> SegmentationMask : <<save>>


class Validator {
    + ground_truth_dir: str
    + ground_truths: List<np.ndarray>
    + output_dir: str
    + validate(predictions_dir: str): void
    + load_masks(ground_truth_dir: str): List<np.ndarray>
    + ...()
}

Validator .u.> SegmentationMask : <<load>>

class EvaluationMetrics {
    + dsc: float
    + ...
}

Validator .d.> EvaluationMetrics : <<save>>

class Visualizer {
    + metrics_dirs: List<str>
    + visualize(): void
    + load_metrics(metrics_dir: str): EvaluationMetrics
    + ...()
}

Visualizer .u.> EvaluationMetrics : <<load>>


@enduml