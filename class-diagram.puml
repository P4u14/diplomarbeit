@startuml
' https://plantuml.com/class-diagram
class Atlas {
+ image_path: str
+ mask_path: str
}

interface IImageSegmenter {
+ load_target_images()
+ segment_image()
+ save_segmentation()
}

IImageSegmenter <|.. AtlasSegmenter
IImageSegmenter <|.. AISegmenter

class AtlasSegmenter {
- num_atlases_to_select: int
- atlas_selector: IAtlasSelector
- preprocessing_steps: List<IPreprocessingStep>
- voting_strategy: IVotingStrategy
- atlas_path
- target_image_path
- segmentation_Result_path
+ load_atlases()
+ load_target_images()
+ preprocess_atlases(preprocessing_steps: List<IPreprocessingStep>)
+ preprocess_target_images(preprocessing_steps: List<IPreprocessingStep>))
+ select_atlases(atlas_selector: IAtlasSelector)
+ vote_segmentation()
+ undo_preprocessing(preprocessing_steps: List<IPreprocessingStep>)
+ save_segmentation()
}

interface IAtlasSelector {
+ select_atlases(List<Atlas>, target_image_path, num_atlases_to_select): List<Atlas>
}

class SimilarityAtlasSelector {
+ select_atlases(List<Atlas>, target_image_path, num_atlases_to_select): List<Atlas>
}

class BMIAtlasSelector {
+ select_atlases(List<Atlas>, target_image_path, num_atlases_to_select): List<Atlas>
}

interface IPreprocessingStep {
- target_image_path
+ preprocess_image(target_image_path): Image
+ undo_preprocess_image(target_image_path): Image
}

class TorsoRoiPreprocessingStep {
- original_size: (int, int)
- target_ratio: float
- cropped_size: (int, int)
- bbox: (int, int, int, int)
- padding: (int, int, int, int)
+ preprocess_image(target_image_path): Image
+ undo_preprocess_image(target_image_path): Image
}

class DimplesRoiPreprocessingStep {
- original_size: (int, int)
- target_ratio: float
- cropped_size: (int, int)
- bbox: (int, int, int, int)
- padding: (int, int, int, int)
+ preprocess_image(target_image_path): Image
+ undo_preprocess_image(target_image_path): Image
}

class ColorPreprocessingStep {
- target_color_space: str
+ preprocess_image(target_image_path): Image
+ undo_preprocess_image(target_image_path): Image
}

interface IVotingStrategy {
vote_segmentation(selected_atlases: List[Atlas], target_image_path): Image
}

class MajorityVotingStrategy {
+ vote_segmentation(selected_atlases: List<Atlas>, target_image_path): Image
}

class WeightedVotingStrategy {
- weights: List[float]
+ vote_segmentation(selected_atlases: List<Atlas>, target_image_path): Image
}

class SoftMaxVotingStrategy {
- temperature: float
+ vote_segmentation(selected_atlases: List<Atlas>, target_image_path): Image
}


AtlasSegmenter "1" o-- "*" Atlas
AtlasSegmenter "1" *-- "1" IAtlasSelector
IAtlasSelector <|.. SimilarityAtlasSelector
IAtlasSelector <|.. BMIAtlasSelector
AtlasSegmenter "1" o-- "*" IPreprocessingStep
IPreprocessingStep <|.. TorsoRoiPreprocessingStep
IPreprocessingStep <|.. DimplesRoiPreprocessingStep
IPreprocessingStep <|.. ColorPreprocessingStep
AtlasSegmenter "1" *-- "1" IVotingStrategy
IVotingStrategy <|.. MajorityVotingStrategy
IVotingStrategy <|.. WeightedVotingStrategy
IVotingStrategy <|.. SoftMaxVotingStrategy

class SegmentationValidator {
- ground_truth_path: str
- segmentation_result_path: str
+ calculate_dice_coefficient(ground_truth_path: str, segmentation_result_path: str): float
+ calculate_dimples_number_difference(ground_truth_path: str, segmentation_result_path: str): int
+ calculate_dimples_center_difference(ground_truth_path: str, segmentation_result_path: str): float
}

class AISegmenter {
+ load_model()
+ segment_image()
+ save_segmentation()
}

@enduml

