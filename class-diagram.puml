@startuml
' https://plantuml.com/class-diagram
class Atlas {
    - image_path
    - mask_path
    - image
    - preprocessed_image
    - preprocessing_parameters
    - mask
    - preprocessed_mask
    - bmi_percentile_interval
    + __init__(image_path, mask_path)
    + append_preprocessing_parameters(parameters)
    + set_bmi_info(image_info_path, bmi_table_path)
}

interface IAtlasSelector {
    + select_atlases(atlases, target_image, n)
}

class BaseAtlasSelector {
    + select_atlases(atlases, target_image, n)
    + to_gray(image)
}

class SimilarityAtlasSelector {
    + select_atlases(atlases, target_image, n)
    + score_atlases(atlases, target_image)
}

class BmiAtlasSelector {
    - image_info_path
    - bmi_table_path
    + __init__(image_info_path, bmi_table_path)
    + select_atlases(atlases, target_image, n)
    + preselect_atlases_on_bmi(atlases, target_image)
}

interface ISegmentationVoter {
    + vote(scored_atlases)
}

class MajorityVoter {
    + vote(scored_atlases)
}

class WeightedMajorityVoter {
    - scheme
    - temperature
    - threshold
    + __init__(scheme, temperature, threshold)
    + vote(scored_atlases)
    - normalize_weights(scored_atlases)
    - softmax_weights(scored_atlases)
    - compute_weights(scored_atlases)
}

interface IPreprocessingStep {
    + preprocess_image(image)
    + preprocess_mask(image, parameters)
    + undo_preprocess_image(image, parameters)
}

class TorsoRoiPreprocessingStep {
    - target_ratio
    + __init__(target_ratio)
    + preprocess_image(image)
    + preprocess_mask(mask, parameters)
    + undo_preprocess_image(image, parameters)
    - crop_torso_roi(image)
    - crop_with_parameters(image, bbox)
    - undo_crop_torso_roi(cropped_image, original_size, bbox)
    - pad_image_to_correct_ratio(self, cropped_image, bbox)
    - pad_image_with_parameters(cropped_image, padding)
    - undo_pad_image_to_correct_ratio(padded_image, padding)
    - rescale_image(cropped_and_padded_image, original_size)
    - undo_rescale_image(rescaled_image, padded_size)
}

class DimplesRoiPreprocessor {
    - __init__(target_ratio)
    + preprocess_image(image)
    + preprocess_mask(mask, parameters)
    + undo_preprocess_image(image, parameters)
    - crop_dimples_roi(image)
}

class ColorPreprocessor {
    - lower_color
    - upper_color
    + __init__(lower_color, upper_color)
    + preprocess_image(image)
    + preprocess_mask(mask, parameters)
    + undo_preprocess_image(image, parameters)
}

class BlueColorPreprocessor {
    + __init__()
}

interface IImageSegmenter {
    + load_target_images(directory_path)
    + segment_images(image_paths)
    + save_segmentation(segmented_image)
}

class AtlasSegmenter {
    - num_atlases_to_select
    - atlas_dir
    - preprocessing_steps
    - atlas_selector
    - segmentation_voter
    - segmentation_refiner
    - output_dir
    + __init__(atlas_dir, num_atlases_to_select, preprocessing_steps, atlas_selector, segmentation_voter,segmentation_refiner, output_dir)
    + load_target_images(directory_path)
    - load_atlases()
    + segment_images(image_paths)
    + save_segmentation(segmented_image)
}

class TargetImage {
    - image_path
    - image
    - preprocessed_image
    - preprocessing_parameters
    + __init__(image_path,)
    + append_preprocessing_parameters(parameters)
}

class TargetSegmentation {
    - output_path
    - result_mask
    + --__init__(output_path, result_mask)
}


class AtlasScore {
    + atlas : Atlas
    + score : float
}

class BmiPercentileCalculator {
    - image_info_path
    - bmi_table_path
    + __init__(image_info_path, bmi_table_path)
    + calculate_bmi_percentile_interval(image_path)
    - _parse_patient_index_from_image_path(image_path)
    - _get_patient_info(all_data_info, patient_idx)
    - _calculate_bmi_interval(all_data_info, patient_idx, bmi_table)
}

interface ISegmentationRefiner {
    + refine(target_segmentation, target_image)
}

class ColorPatchRefiner {
    - color_preprocessor
    + __init__(color_preprocessor)
    + refine(target_segmentation, target_image)
}

class Validator {
    - ground_truth_dir
    - ground_truths
    - output_dir
    + __init__(ground_truth_dir, output_dir)
    + validate(predictions_dir)
    - parse_dataset(file_name)
    - load_masks(segmentations_dir)
    - compute_metrics(file_name, gt, pred)
    - load_markers(file_name)
    - read_markers_from_file(file_name, img_number, dataset)
    - parse_patient_index_from_image_path(image_path)
    - extract_image_number(file_name)
    - centroid(bin_mask, x, y)
    - half_centroids_from_mask(mask)
    - half_centroids_from_mask_with_markers(mask, p1, p2)
    - calculate_center_deviation(dimples_center_gt, dimples_center_pred)
}

class SegmentMetrics {
    - dice
    - precision
    - recall
    - n_gt_segments
    - n_pred_segments
    - dimples_center_left_deviation
    - dimples_center_right_deviation
}

IImageSegmenter <|.. AtlasSegmenter

AtlasSegmenter o-- "1..*" IPreprocessingStep
AtlasSegmenter o-- "1" IAtlasSelector
AtlasSegmenter o-- "1" ISegmentationVoter
AtlasSegmenter o-- "1" ISegmentationRefiner
AtlasSegmenter ..> Atlas : <<load>>
AtlasSegmenter ..> TargetImage : <<load>>
AtlasSegmenter ..> TargetSegmentation : <<create>>

IAtlasSelector <|.. BaseAtlasSelector
BaseAtlasSelector <|-- SimilarityAtlasSelector
SimilarityAtlasSelector <|-- BmiAtlasSelector

IAtlasSelector ..> Atlas : <<select>>
IAtlasSelector ..> TargetImage : <<compare with>>

SimilarityAtlasSelector ..> AtlasScore : <<create>>

BmiAtlasSelector ..> BmiPercentileCalculator : <<calculate data>>

IPreprocessingStep <|.. TorsoRoiPreprocessingStep
TorsoRoiPreprocessingStep <|-- DimplesRoiPreprocessor
IPreprocessingStep <|.. ColorPreprocessor
ColorPreprocessor <|-- BlueColorPreprocessor

ISegmentationVoter <|.. MajorityVoter
ISegmentationVoter <|.. WeightedMajorityVoter
ISegmentationVoter ..> AtlasScore : <<consume>>

ISegmentationRefiner <|.. ColorPatchRefiner

ColorPatchRefiner o-- "1" ColorPreprocessor : <<use>>

AtlasScore o-- "1" Atlas : <<reference>>

Atlas ..> BmiPercentileCalculator : <<set bmi info>>

Validator ..> SegmentMetrics : <<compute>>

@enduml

